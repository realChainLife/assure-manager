"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require(".");
class Client {
    constructor(name, filePath, provider) {
        this.checkContract = async () => {
            const checkResult = await this.provider.checkContract(this.filePath);
            if (!checkResult.success) {
                throw new Error(checkResult.error);
            }
        };
        this.deployContract = async () => {
            const receipt = await this.provider.launchContract(this.name, this.filePath);
            return receipt;
        };
        this.createTransaction = (params) => {
            const tx = new _1.Transaction(params && params.method);
            return tx;
        };
        this.submitTransaction = async (tx) => {
            if (!tx.sender) {
                throw new Error("Transaction should have `sender` property");
            }
            if (!tx.method) {
                throw new Error("Transaction should have `method` property");
            }
            let receipt;
            try {
                receipt = await this.provider.execute(this.name, tx.method.name, tx.sender, ...tx.method.args);
            }
            catch (error) {
                receipt = { success: false, error: error };
            }
            return receipt;
        };
        this.createQuery = (params) => {
            const query = new _1.Query(params.method, params.atChaintip);
            return query;
        };
        this.submitQuery = async (query) => {
            // let res = await this.node.execute(
            //     this.name,
            //     query.method.name,
            //     "SZ2J6ZY48GV1EZ5V2V5RB9MP66SW86PYKKQ9H6DPR",
            //     ...query.method.args)
            if (!query.method) {
                throw new Error("Query should target a method");
            }
            const res = await this.provider.eval(this.name, `(${query.method.name} ${query.method.args.join(" ")})`, true, query.atChaintip);
            return res;
        };
        this.name = name;
        this.filePath = filePath;
        this.provider = provider;
    }
}
exports.Client = Client;
//# sourceMappingURL=client.js.map