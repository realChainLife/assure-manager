import { CheckResult, Receipt } from "../../core";
import { Provider } from "../../core/provider";
export declare class ExecutionError extends Error {
    readonly code: number;
    readonly commandOutput: string;
    readonly errorOutput: string;
    constructor(message: string, code: number, commandOutput: string, errorOutput: string);
}
export declare class NativeClarityBinProvider implements Provider {
    /**
     * Instantiates a new executor. Before returning, ensures db is ready with `initialize`.
     * @param dbFilePath File path to the db. If not specified then a temporary file is created
     *                   and gets deleted when `close` is invoked.
     */
    static create(dbFilePath: string, clarityBinPath: string): Promise<NativeClarityBinProvider>;
    /**
     * Instantiates a new executor pointed at a new temporary database file.
     * The temp file is deleted when `close` is invoked.
     * Before returning, ensures db is ready with `initialize`.
     */
    static createEphemeral(clarityBinPath: string): Promise<Provider>;
    readonly dbFilePath: string;
    readonly clarityBinPath: string;
    private closeActions;
    constructor(dbFilePath: string, clarityBinPath: string);
    /**
     * Run command against a local Blockstack node VM.
     * Uses `clarity-cli` with the configured native bin path.
     * @param args clarity-cli commands.
     */
    runCommand(args: string[], opts?: {
        stdin: string;
    }): Promise<import("../../utils/processUtil").ExecutionResult>;
    initialize(): Promise<void>;
    checkContract(contractFilePath: string): Promise<CheckResult>;
    launchContract(contractName: string, contractFilePath: string): Promise<Receipt>;
    execute(contractName: string, functionName: string, senderAddress: string, ...args: string[]): Promise<Receipt>;
    evalRaw(evalStatement: string): Promise<Receipt>;
    eval(contractName: string, evalStatement: string, includeDebugOutput?: boolean, atChaintip?: boolean): Promise<Receipt>;
    mineBlock(time?: number | bigint): Promise<void>;
    mineBlocks(count: number | bigint): Promise<void>;
    getBlockHeight(): Promise<bigint>;
    close(): Promise<void>;
}
