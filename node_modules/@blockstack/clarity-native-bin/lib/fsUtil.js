"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs-extra"));
const os = __importStar(require("os"));
const path = __importStar(require("path"));
function makeUniqueTempDir() {
    const osTempDir = os.tmpdir();
    const uniqueTempDir = fs.mkdtempSync(`${osTempDir}${path.sep}`);
    return uniqueTempDir;
}
exports.makeUniqueTempDir = makeUniqueTempDir;
/**
 * If the current platform is Windows then returns [[file]] with
 * the `.exe` extension appended.
 * Otherwise, returns the given [[file]] unchanged.
 * @param file A file name or path to file.
 */
function getExecutableFileName(file) {
    if (os.platform() === "win32" || os.platform() === "cygwin") {
        const windowsExecutableExt = ".exe";
        if (path.extname(file) !== windowsExecutableExt) {
            return `${file}${windowsExecutableExt}`;
        }
    }
    return file;
}
exports.getExecutableFileName = getExecutableFileName;
/**
 * Ensures the provided output directory exists and is writable.
 * Deletes the provided output file if it already exists and overwrite has been specified.
 */
function verifyOutputFile(logger, overwriteExisting, outputFilePath) {
    const fullFilePath = path.resolve(outputFilePath);
    const outputDirectory = path.dirname(fullFilePath);
    try {
        if (fs.existsSync(fullFilePath)) {
            const stat = fs.lstatSync(fullFilePath);
            if (!stat.isFile()) {
                logger.error(`The specified output file path exists and is not a file: ${fullFilePath}`);
                return false;
            }
            if (!overwriteExisting) {
                logger.error(`The specified output file path already exists: ${fullFilePath}`);
                logger.error("Specify the overwrite option to ignore this error.");
                return false;
            }
            logger.log(`Overwriting existing file: ${fullFilePath}`);
            fs.unlinkSync(fullFilePath);
        }
        else {
            fs.mkdirpSync(outputDirectory);
        }
        return true;
    }
    catch (error) {
        logger.error(error);
        const fsErr = error;
        if (fsErr.code === "EACCES" || fsErr.code === "EPERM") {
            logger.error(`Permission error writing to ${fullFilePath}`);
            logger.error("Try running with sudo or elevated permissions");
        }
        else {
            logger.error(`Error writing to ${fullFilePath}`);
        }
        return false;
    }
}
exports.verifyOutputFile = verifyOutputFile;
exports.moveFromPath = (opts) => {
    opts.logger.log(`Moving ${opts.inputFilePAth} to ${opts.outputFilePath}`);
    fs.moveSync(opts.inputFilePAth, opts.outputFilePath);
    return true;
};
//# sourceMappingURL=fsUtil.js.map