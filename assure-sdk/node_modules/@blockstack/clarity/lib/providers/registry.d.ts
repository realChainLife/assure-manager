import { Provider, ProviderConstructor } from "../core/provider";
export declare class ProviderRegistry {
    static availableProviders: ProviderConstructor[];
    static defaultLoadCachedPromise: Promise<false | ProviderConstructor> | undefined;
    static registerProvider(providerConstructor: ProviderConstructor, clearExisting?: boolean): void;
    /**
     * Attempt loading the default `clarity-native-bin` module. This module must be set as
     * a `peerDependency` and dynamically imported to avoid issues with circular dependencies,
     * and allow consuming libs to specify their own provider.
     * @returns Promise resolves to a `ProviderConstructor` if loaded successfully, or `false`
     * if the module is not available.
     */
    static tryLoadDefaultBinProvider(): Promise<false | ProviderConstructor>;
    /**
     * Creates an instance of the last registered provider.
     * @param noWarn Set to true to disable warning log about multiple registered providers.
     */
    static createProvider(noWarn?: boolean): Promise<Provider>;
    private constructor();
}
