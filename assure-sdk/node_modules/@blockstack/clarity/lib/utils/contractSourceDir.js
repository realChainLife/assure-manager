"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const fsUtil_1 = require("./fsUtil");
exports.CONTRACT_FILE_EXT = ".clar";
function getContractFilePath(contractFile) {
    function* getLocations(file) {
        yield path.resolve(file);
        yield path.resolve("contracts", file);
        yield path.resolve(__dirname, "contracts", file);
        yield path.resolve(__dirname, file);
        if (!file.endsWith(exports.CONTRACT_FILE_EXT)) {
            for (const f of getLocations(file + exports.CONTRACT_FILE_EXT)) {
                yield f;
            }
        }
    }
    // Normalize OS path separators.
    if (path.sep === path.posix.sep && contractFile.includes(path.win32.sep)) {
        contractFile = contractFile.replace(/\\/g, path.sep);
    }
    else if (path.sep === path.win32.sep && contractFile.includes(path.posix.sep)) {
        contractFile = contractFile.replace(/\//g, path.sep);
    }
    for (const filePath of getLocations(contractFile)) {
        if (fsUtil_1.fileExists(filePath)) {
            return filePath;
        }
    }
    throw new Error(`Could not find contract file: ${contractFile}`);
}
exports.getContractFilePath = getContractFilePath;
function getNormalizedContractFilePath(contractFilePath) {
    const filePath = getContractFilePath(contractFilePath);
    const contractSource = fs.readFileSync(filePath, "utf8")
        .replace(/\r/g, "")
        .replace(/\t/g, " ");
    const tempName = `blockstack-contract-${path.basename(contractFilePath)}`;
    const tempFilePath = fsUtil_1.getTempFilePath(`${tempName}-{uniqueID}.clar`);
    fs.writeFileSync(tempFilePath, contractSource);
    return tempFilePath;
}
exports.getNormalizedContractFilePath = getNormalizedContractFilePath;
//# sourceMappingURL=contractSourceDir.js.map