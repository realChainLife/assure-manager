export interface ResultInterface<ResultType, ErrorType> {
    success: boolean;
    error?: ErrorType;
    result?: ResultType;
}
declare type ExtractOk<T extends ResultInterface<unknown, unknown>> = T extends ResultInterface<infer U, unknown> ? U : never;
declare type ExtractErr<T extends ResultInterface<unknown, unknown>> = T extends ResultInterface<unknown, infer U> ? U : never;
/**
 * Type guard for objects that define `ResultInterface`.
 * If `success` is true then the `result` property is marked as defined,
 * otherwise, the `error` property is marked as defined.
 */
export declare function matchResult<TReturn, T extends ResultInterface<unknown, unknown>>(input: T, ok: (val: ExtractOk<T>) => TReturn, error: (err: ExtractErr<T>) => TReturn): TReturn;
/**
 * Type guard for objects that define `ResultInterface`.
 * If `success` is true then the `result` property is marked as defined,
 * otherwise, the `error` property is marked as defined.
 */
export declare function extractResult<T extends ResultInterface<unknown, unknown>>(input: T): {
    success: true;
    result: ExtractOk<T>;
} | {
    success: false;
    error: ExtractErr<T>;
};
/**
 * Unwraps an object that defines `ResultInterface`.
 * If `success` is true then the object's `result` value is returned.
 * Otherwise, an error is thrown with the given object's `error` value.
 * The type of the `error` value determines what gets thrown:
 * * If `error` is an instance of an `Error` object then it is directly thrown.
 * * If `error` is a string then an `Error` will be constructed with the string and thrown.
 * * If `error` is of neither type then the object is thrown directly (not generally recommended).
 */
export declare function unwrapResult<T extends ResultInterface<unknown, unknown>>(input: T): ExtractOk<T>;
export declare function unwrapUInt(input: ResultInterface<string, unknown>): number;
export declare function unwrapInt(input: ResultInterface<string, unknown>): number;
export declare function unwrapString(input: ResultInterface<string, unknown>): string;
export declare const Result: {
    unwrap: typeof unwrapResult;
    extract: typeof extractResult;
    match: typeof matchResult;
    unwrapUInt: typeof unwrapUInt;
    unwrapInt: typeof unwrapInt;
    unwrapString: typeof unwrapString;
};
export {};
