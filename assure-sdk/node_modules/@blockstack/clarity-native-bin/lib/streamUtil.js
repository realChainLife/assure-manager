"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const readline = __importStar(require("readline"));
const stream_1 = require("stream");
const util_1 = require("util");
exports.pipelineAsync = util_1.promisify(stream_1.pipeline);
class MemoryStream extends stream_1.Writable {
    constructor(opts) {
        super(opts);
        this.buffers = [];
    }
    _write(chunk, encoding, callback) {
        if (chunk instanceof Buffer) {
            this.buffers.push(chunk);
        }
        else {
            this.buffers.push(Buffer.from(chunk, encoding));
        }
        callback(null);
    }
    getData() {
        if (this.buffers.length === 1) {
            return this.buffers[0];
        }
        return Buffer.concat(this.buffers);
    }
}
exports.MemoryStream = MemoryStream;
async function readStream(stream, ignoreErrors = false, monitorCallback) {
    const memStream = new MemoryStream();
    async function startReadInternal() {
        const streamArr = [stream];
        if (monitorCallback) {
            const passThrough = new stream_1.PassThrough();
            const readStreamLine = readline.createInterface({
                input: passThrough,
                crlfDelay: Infinity
            });
            readStreamLine.on("line", lineData => {
                monitorCallback(lineData);
            });
            streamArr.push(passThrough);
        }
        streamArr.push(memStream);
        await exports.pipelineAsync(streamArr);
    }
    if (ignoreErrors) {
        try {
            await startReadInternal();
        }
        catch (error) {
            console.log(`ignored readStream error: ${error}`);
        }
    }
    else {
        await startReadInternal();
    }
    return memStream.getData();
}
exports.readStream = readStream;
//# sourceMappingURL=streamUtil.js.map